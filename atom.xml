<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunnyxd&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sunnyxd.com/"/>
  <updated>2016-04-22T09:45:32.406Z</updated>
  <id>http://www.sunnyxd.com/</id>
  
  <author>
    <name>xiaodong.fan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解JavaScript中的作用域和作用域链</title>
    <link href="http://www.sunnyxd.com/2016/04/22/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://www.sunnyxd.com/2016/04/22/理解JavaScript中的作用域和作用域链/</id>
    <published>2016-04-22T09:15:55.000Z</published>
    <updated>2016-04-22T09:45:32.406Z</updated>
    
    <content type="html">&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;p&gt;&lt;code&gt;作用域就是变量与函数的可访问范围&lt;/code&gt;，即作用域控制着变量与函数的可见性和生命周期。&lt;br&gt;在JavaScript中，变量的作用域有全局作用域和局部作用域两种。&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h2&gt;&lt;p&gt;函数对象有一个内部属性[[Scope]]，包含了函数被创建后的作用域中对象的集合，&lt;br&gt;这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;br&gt;示例：&lt;br&gt;当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象填充。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;    function add(num1, num2){&lt;br&gt;      var sum = num1 + num2;&lt;br&gt;      return sum;&lt;br&gt;    }&lt;br&gt;在函数add创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量，如下图所示（注意：图片只列举了全部变量中的一部分）：&lt;br&gt;&lt;img src=&quot;http://7xnxzw.com1.z0.glb.clouddn.com/js作用域链_01.jpg&quot; alt=&quot;js作用域链_01&quot;&gt;&lt;br&gt;执行add函数时会创建一个称为&lt;code&gt;“运行期上下文(execution context)”&lt;/code&gt;的内部对象，运行期上下文定义了函数执行时的环境。&lt;br&gt;每个运行期上下文都有自己的作用域链，用于标识符解析。&lt;br&gt;当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象，这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。&lt;br&gt;它们共同组成了一个新的对象，叫&lt;code&gt;“活动对象(activation object)”&lt;/code&gt;，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端，当运行期上下文被销毁，活动对象也随之销毁。新的作用域链如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xnxzw.com1.z0.glb.clouddn.com/js作用域链_02.jpg&quot; alt=&quot;js作用域链_02&quot;&gt;&lt;br&gt;&lt;code&gt;在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。&lt;/code&gt;该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。&lt;/p&gt;
&lt;h2 id=&quot;作用域链和代码优化&quot;&gt;&lt;a href=&quot;#作用域链和代码优化&quot; class=&quot;headerlink&quot; title=&quot;作用域链和代码优化&quot;&gt;&lt;/a&gt;作用域链和代码优化&lt;/h2&gt;&lt;p&gt;从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。&lt;br&gt;如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：&lt;code&gt;如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;改变作用域链&quot;&gt;&lt;a href=&quot;#改变作用域链&quot; class=&quot;headerlink&quot; title=&quot;改变作用域链&quot;&gt;&lt;/a&gt;改变作用域链&lt;/h2&gt;&lt;p&gt;&lt;code&gt;函数每次执行时对应的运行期上下文都是独一无二的&lt;/code&gt;，所以多次调用同一个函数就会导致创建多个运行期上下文，当函数执行完毕，执行上下文会被销毁。每一个运行期上下文都和一个作用域链关联。一般情况下，在运行期上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。&lt;br&gt;with语句是对象的快捷应用方式，用来避免书写重复代码。&lt;br&gt;对with语句来说，会将指定的对象添加到作用域链中，对catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。&lt;br&gt;此时，作用域链中函数的所有局部变量所在的作用域对象会被推后，访问代价变高了。&lt;br&gt;在实际应用中，应少用with，把catch中的错误委托给一个函数处理。&lt;/p&gt;
&lt;h2 id=&quot;没有块级作用域&quot;&gt;&lt;a href=&quot;#没有块级作用域&quot; class=&quot;headerlink&quot; title=&quot;没有块级作用域&quot;&gt;&lt;/a&gt;没有块级作用域&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if(true){
  var i = 0;
  i++;
}
console.log(i); //1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在c、c++或java语言中，if语句执行完毕后i会被销毁，而在js中，if语句中的变量声明是添加到了当前函数的执行环境中，所以在if语句之后仍然可以正常访问。&lt;/p&gt;
&lt;h3 id=&quot;模仿块级作用域&quot;&gt;&lt;a href=&quot;#模仿块级作用域&quot; class=&quot;headerlink&quot; title=&quot;模仿块级作用域&quot;&gt;&lt;/a&gt;模仿块级作用域&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;(function(){
  //这里是块级作用域
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将函数声明包含在一对圆括号中，表示它实际上是一个函数表达式，而紧随其后的另一对圆括号会立即调用这个函数。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用域就是变量和函数的可访问范围，通常，局部环境中的变量和函数是不能被外部环境访问的；&lt;/li&gt;
&lt;li&gt;作用域链决定了哪些数据能够被当前函数访问以及访问的顺序；&lt;/li&gt;
&lt;li&gt;函数创建时，会创建一个Global Object，填入它的作用域链；函数执行时，会创建一个运行期上下文的对象，它定义了函数执行时的环境。函数执行环境包含一个活动对象，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，它会被推入作用域链的最前端；&lt;/li&gt;
&lt;li&gt;函数执行过程，每遇到一个变量，都会经历一次标识符解析的过程(逐级向上搜索作用域链)以决定从哪里获取和存储数据；&lt;/li&gt;
&lt;li&gt;全局变量存在于运行期上下文作用域链的最末端，查找最慢，所以我们应该尽可能少使用全局变量，如果使用，就先用局部变量缓存下来；&lt;/li&gt;
&lt;li&gt;在运行期上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响，应少用with，把catch中的错误委托给一个函数处理；&lt;/li&gt;
&lt;li&gt;js中没有块级作用域，但是我们可以模仿实现它。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;p&gt;&lt;code&gt;作用域就是变量与函数的可访问范围&lt;/code&gt;，即作用域控制着变量与函数的可见性和生命周期。&lt;br&gt;在JavaScript中，变量的作用域有全局作用域和局部作用域两种。&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;&lt;a href=&quot;#作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域链&quot;&gt;&lt;/a&gt;作用域链&lt;/h2&gt;&lt;p&gt;函数对象有一个内部属性[[Scope]]，包含了函数被创建后的作用域中对象的集合，&lt;br&gt;这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;br&gt;示例：&lt;br&gt;当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象填充。
    
    </summary>
    
      <category term="web前端" scheme="http://www.sunnyxd.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.sunnyxd.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.sunnyxd.com/2016/04/18/hello-world/"/>
    <id>http://www.sunnyxd.com/2016/04/18/hello-world/</id>
    <published>2016-04-18T09:54:19.239Z</published>
    <updated>2016-04-22T09:46:15.095Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;
    
    </summary>
    
      <category term="hexo入门" scheme="http://www.sunnyxd.com/categories/hexo%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="博客搭建" scheme="http://www.sunnyxd.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
